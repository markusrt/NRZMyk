@inject ILogger<Create> Logger
@inject SentinelEntryService SentinelEntryService
@inject ClinicalBreakpointService ClinicalBreakpointService
@using HaemophilusWeb.Utils
@using Microsoft.Extensions.Logging
@using NRZMyk.Services.Data.Entities
@using NRZMyk.Services.Services
@using NRZMyk.Components.SharedComponents.Input
@using NRZMyk.Services.Models
@inherits NRZMyk.Components.Helpers.BlazorComponent

@namespace NRZMyk.Components.Pages.SentinelEntryPage

<h2>Neu anlegen</h2>

<div>
    <EditForm Model="_item" OnValidSubmit="@CreateClick">

        <DataAnnotationsValidator />

        <div class="form-group row">
            <label class="col-form-label col-sm-4">Material</label>
            <div class="col-sm-6">
                <InputSelect class="form-control" @bind-Value="_item.Material">
                    @foreach (var material in EnumUtils.AllEnumValues<Material>())
                    {
                        <option value="@material">@EnumUtils.GetEnumDescription(material)</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _item.Material" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-form-label col-sm-4">Alter des Patienten</label>
            <div class="col-sm-6">
                <InputSelect class="form-control" @bind-Value="_item.AgeGroup">
                    @foreach (var ageGroup in EnumUtils.AllEnumValues<AgeGroup>())
                    {
                        <option value="@ageGroup">@EnumUtils.GetEnumDescription(ageGroup)</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _item.AgeGroup" />
            </div>
        </div>

        <div class="form-group row">
            <label class="control-label col-sm-4">Probentnahme</label>
            <div class="col-sm-6">
                <InputDate class="form-control" @bind-Value="_item.SamplingDate" />
                <ValidationMessage For="(() => _item.SamplingDate)" />
            </div>
        </div>

        <InputTextWithValidation FieldName="Labornummer Einsender" @bind-Value="_item.SenderLaboratoryNumber" For="() => _item.SenderLaboratoryNumber" />

        <div class="form-group row">
            <label class="col-form-label col-sm-4">Station</label>
            <div class="col-sm-3">
                <InputSelect class="form-control" @bind-Value="_item.HospitalDepartmentType">
                    @foreach (var departmentType in EnumUtils.AllEnumValues<HospitalDepartmentType>())
                    {
                        <option value="@departmentType">@EnumUtils.GetEnumDescription(departmentType)</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _item.HospitalDepartmentType" />
            </div>
            <div class="col-sm-3">
                <InputSelect class="form-control" @bind-Value="_item.HospitalDepartment">
                    @foreach (var department in EnumUtils.AllEnumValues<HospitalDepartment>())
                    {
                        <option value="@department">@EnumUtils.GetEnumDescription(department)</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _item.HospitalDepartment" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-form-label col-sm-4">Spezies</label>
            <div class="col-sm-6">
                <InputSelect class="form-control" @bind-Value="_item.IdentifiedSpecies">
                    @foreach (var species in EnumUtils.AllEnumValues<Species>())
                    {
                        <option value="@species">@EnumUtils.GetEnumDescription(species)</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _item.IdentifiedSpecies" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-form-label col-sm-4">Methode Speziesidentifikation</label>
            <div class="col-sm-6">
                <InputSelect class="form-control" @bind-Value="_item.SpeciesIdentificationMethod">
                    @foreach (var identificationMethod in EnumUtils.AllEnumValues<SpeciesIdentificationMethod>())
                    {
                        <option value="@identificationMethod">@EnumUtils.GetEnumDescription(identificationMethod)</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _item.SpeciesIdentificationMethod" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-form-label col-sm-4">Anmerkungen</label>
            <div class="col-sm-6">
                <InputTextArea class="form-control" @bind-Value="_item.Remark" />
                <ValidationMessage For="() => _item.Remark" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-form-label col-sm-4">Breakpoints</label>
            <div class="col-md-6">
                <InputSelectNumber @bind-Value="_item.ClinicalBreakpointId" class="form-control">
                    @foreach (var breakpoint in _clinicalBreakpoints)
                    {
                        <option value="@breakpoint.Id">@breakpoint.Title</option>
                    }
                </InputSelectNumber>
                <ValidationMessage For="(() => _item.ClinicalBreakpointId)" />
            </div>
        </div>

        <div class="form-group row">
            <div class="offset-4 col-sm-6 text-right">
                <a href="" @onclick="() => OnCloseClick.InvokeAsync(null)" @onclick:preventDefault class="btn btn-secondary">
                    Abbrechen
                </a>
                <button type="submit" class="btn btn-primary">
                    Anlegen
                </button>
            </div>
        </div>

    </EditForm>
</div>

@code {

    [Parameter]
    public EventCallback<string> OnCloseClick { get; set; }

    private readonly CreateSentinelEntryRequest _item = new CreateSentinelEntryRequest();
    private List<ClinicalBreakpointReference> _clinicalBreakpoints = new List<ClinicalBreakpointReference>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("Now loading... /SentinelEntry/Create");
        if (firstRender)
        {
            _clinicalBreakpoints = await ClinicalBreakpointService.List();
            
            CallRequestRefresh();
        }


        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task CreateClick()
    {
        await SentinelEntryService.Create(_item);
        await OnCloseClick.InvokeAsync(null);
    }
}
