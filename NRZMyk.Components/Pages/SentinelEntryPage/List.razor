@namespace NRZMyk.Components.Pages.SentinelEntryPage
@page "/sentinel-entries"
@attribute [Authorize(Roles = nameof(Role.User))]
@inject SentinelEntryService SentinelEntryService
@using NRZMyk.Services.Data.Entities
@using NRZMyk.Services.ModelExtensions
@using NRZMyk.Services.Models
@using NRZMyk.Services.Services
@using NRZMyk.Services.Utils
@inherits NRZMyk.Components.Helpers.BlazorComponent

<h1>Sentinel Daten</h1>

@if (sentinelEntries == null)
{
    <p><em>Daten werden geladen...</em></p>
}
else
{
    @if (!showCreate && !showDetails && !showEdit && !showDelete)
    {
        <div class="form-group row">
            <div class="col-sm-3">
                <button class="btn btn-primary" @onclick="@(() => CreateClick())">
                    Neu anlegen
                </button>
            </div>
            <div class="offset-3 col-sm-6 text-right">
                <AuthorizeView Roles=@nameof(Role.SuperUser)>
                    <Authorized>
                        <ExportButton />
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>

        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Sentinel Labornummer</th>
                    <th>Material</th>
                    <th>Alter</th>
                    <th>Probennahme</th>
                    <th>Einsender Labornummer</th>
                    <th>Station </th>
                    <th>Spezies</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in sentinelEntries)
                {
                    <tr>
                        <td>@item.LaboratoryNumber</td>
                        <td>@item.MaterialOrOther()</td>
                        <td>@EnumUtils.GetEnumDescription(item.AgeGroup)</td>
                        <td>
                            @if (item.SamplingDate.HasValue)
                            {
                                @item.SamplingDate.Value.ToShortDateString();
                            }
                        </td>
                        <td>@item.SenderLaboratoryNumber</td>
                        <td>@item.HospitalDepartementOrOther()</td>
                        <td>@item.SpeciesOrOther()</td>
                        <td>
                            <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
                                @if (item.CryoDate.HasValue)
                                {
                                    <a title="Eintrag ansehen" href="" @onclick="() => DetailsClick(item.Id)" @onclick:preventDefault class="btn btn-primary">
                                        <i class="oi oi-eye"></i>
                                    </a>
                                }
                                else
                                {
                                    <a title="Eintrag bearbeiten" href="" @onclick="() => EditClick(item.Id)" @onclick:preventDefault class="btn btn-primary">
                                        <i class="oi oi-pencil"></i>
                                    </a>
                                }

                                <a title="Eintrag löschen" href="" @onclick="() => DeleteClick(item.Id)" @onclick:preventDefault class="btn btn-danger">
                                    <i class="oi oi-trash"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    @if (showDetails)
    {
        <Details Id="@selectedId" OnCloseClick="CloseDetailsHandler"></Details>
    }

    @if (showEdit)
    {
        <Create Id="@selectedId" OnCloseClick="CloseEditHandler"></Create>
    }

    @if (showCreate)
    {
        <Create OnCloseClick="CloseCreateHandler"></Create>
    }

    @if (showDelete)
    {
        <Delete Id="@selectedId" OnCloseClick="CloseDeleteHandler"></Delete>
    }
}

@code
{
    private List<SentinelEntry> sentinelEntries;
    private bool showCreate;
    private bool showDetails;
    private bool showEdit;
    private bool showDelete;
    private int selectedId = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            sentinelEntries = await SentinelEntryService.ListPaged(50);

            await InvokeAsync(CallRequestRefresh);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void DetailsClick(int id)
    {
        selectedId = id;
        showDetails = true;
    }

    private void CreateClick()
    {
        showCreate = true;
    }

    private void EditClick(int id)
    {
        selectedId = id;
        showEdit = true;
    }

    private void DeleteClick(int id)
    {
        selectedId = id;
        showDelete = true;
    }

    private async Task CloseDetailsHandler(string action)
    {
        showDetails = false;
        await ReloadCatalogItems();
    }
    
    private async Task CloseEditHandler(string action)
    {
        showEdit = false;
        await ReloadCatalogItems();
    }

    private async Task CloseDeleteHandler(string action)
    {
        showDelete = false;
        await ReloadCatalogItems();
    }

    private async Task CloseCreateHandler(string action)
    {
        showCreate = false;
        await ReloadCatalogItems();
    }

    private async Task ReloadCatalogItems()
    {
        sentinelEntries = await SentinelEntryService.ListPaged(50);
        StateHasChanged();
    }
}
