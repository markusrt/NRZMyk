@page "/sentinel-entries"
@attribute [Authorize(Roles = nameof(Role.User))]
@inherits NRZMyk.Components.Helpers.BlazorComponent

@inject ISentinelEntryService SentinelEntryService
@inject IAccountService AccountService

<h1>Sentinel Daten</h1>

@if (sentinelEntries == null)
{
    <p><em>Daten werden geladen...</em></p>
}
else
{
    @if (!showCreate && !showDetails && !showEdit && !showDelete)
    {
        <div class="mb-3 row">
            <div class="col-sm-3">
                <a href="sentinel-entry/" class="btn btn-primary">
                    Neu anlegen
                </a>
            </div>
            <div class="offset-3 col-sm-6 text-end">
                <AuthorizeView Roles=@nameof(Role.SuperUser)>
                    <Authorized>
                        <ExportButton />
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>

        <EditForm Model="@this">
            <!-- Search and Filter Controls -->
            <div class="mb-3 row">
                <label class="col-form-label col-sm-2">Suche</label>
                <div class="col-sm-4">
                    <InputText class="form-control" @bind-Value="@searchTerm" @onkeypress="@OnSearchKeyPress" placeholder="Labornummer, Einsender, Datum, Spezies..." />
                </div>
                <div class="col-sm-2">
                    <button class="btn btn-outline-secondary" type="button" @onclick="OnSearchAsync">
                        Suchen
                    </button>
                    @if (!string.IsNullOrEmpty(searchTerm))
                    {
                        <button class="btn btn-outline-danger ms-1" type="button" @onclick="OnClearSearchAsync">
                            ✕
                        </button>
                    }
                </div>
            </div>

            <!-- Organization selector for super users -->
            <AuthorizeView Roles=@nameof(Role.SuperUser)>
                <Authorized Context="authContext">
                    <div class="mb-3 row">
                        <label class="col-form-label col-sm-2">Organisation</label>
                        <div class="col-sm-4">
                            <InputSelectNumber class="form-select" @bind-Value="selectedOrganizationId">
                                <option value="-1">Alle Organisationen</option>
                                @if (organizations != null)
                                {
                                    @foreach (var organization in organizations)
                                    {
                                        <option value="@organization.Id">@organization.Name</option>
                                    }
                                }
                            </InputSelectNumber>
                        </div>
                        <div class="col-sm-2">
                            <button class="btn btn-outline-secondary" type="button" @onclick="OnOrganizationChangeAsync">
                                Laden
                            </button>
                        </div>
                    </div>
                </Authorized>
            </AuthorizeView>
        </EditForm>

        <!-- Results info -->
        @if (pagedResult != null && !string.IsNullOrEmpty(searchTerm))
        {
            <div class="alert alert-info">
                Suchergebnisse für "@searchTerm" - @sentinelEntries.Count Einträge gefunden
            </div>
        }

        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Sentinel Labornummer</th>
                    <th>Material</th>
                    <th>Alter</th>
                    <th>Entnahmedatum</th>
                    <th>Einsender Labornummer</th>
                    <th>Station </th>
                    <th>Spezies</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in sentinelEntries)
                {
                    <tr>
                        <td>@item.LaboratoryNumber</td>
                        <td>@item.MaterialOrOther()</td>
                        <td>@EnumUtils.GetEnumDescription(item.AgeGroup)</td>
                        <td>
                            @if (item.SamplingDate.HasValue)
                            {
                                @item.SamplingDate.Value.ToShortDateString();
                            }
                        </td>
                        <td>@item.SenderLaboratoryNumber</td>
                        <td>@item.HospitalDepartmentOrOther()</td>
                        <td>@item.SpeciesOrOther()</td>
                        <td>
                            <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
                                @if (item.CryoDate.HasValue)
                                {
                                    <a title="Eintrag ansehen" href="" @onclick="() => DetailsClick(item.Id)" @onclick:preventDefault class="btn btn-primary">
                                        <i class="oi oi-eye"></i>
                                    </a>
                                }
                                else
                                {
                                    <a title="Eintrag bearbeiten" href="@($"sentinel-entry/{item.Id}")" class="btn btn-primary">
                                        <i class="oi oi-pencil"></i>
                                    </a>
                                    <a title="Eintrag löschen" href="" @onclick="() => DeleteClick(item.Id)" @onclick:preventDefault class="btn btn-danger">
                                        <i class="oi oi-trash"></i>
                                    </a>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (pagedResult != null && pagedResult.PageCount > 1)
        {
            <Pagination CurrentPage="@currentPage" TotalPages="@pagedResult.PageCount" OnPageChanged="@OnPageChangedAsync" />
        }
    }
    @if (showDetails)
    {
        <Details Id="@selectedId" OnCloseClick="CloseDetailsHandler"></Details>
    }

@*    @if (showEdit)
    {
        <Create Id="@selectedId" OnCloseClick="CloseEditHandler"></Create>
    }

    @if (showCreate)
    {
        <Create OnCloseClick="CloseCreateHandler"></Create>
    }*@

    @if (showDelete)
    {
        <Delete Id="@selectedId" OnCloseClick="CloseDeleteHandler"></Delete>
    }
}

@code
{
    private List<SentinelEntry> sentinelEntries = default!;
    private PagedSentinelEntryResult pagedResult = default!;
    private ICollection<Organization> organizations = default!;
    private bool showCreate;
    private bool showDetails;
    private bool showEdit;
    private bool showDelete;
    private int selectedId = 0;
    private int currentPage = 0;
    private int selectedOrganizationId = -1;
    private string searchTerm = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load organizations for super users
            try 
            {
                organizations = await AccountService.ListOrganizations().ConfigureAwait(true);
            }
            catch
            {
                // Regular users might not have access to organization list
                organizations = new List<Organization>();
            }

            await LoadDataAsync().ConfigureAwait(true);
            await InvokeAsync(CallRequestRefresh).ConfigureAwait(true);
        }

        await base.OnAfterRenderAsync(firstRender).ConfigureAwait(true);
    }

    private async Task LoadDataAsync()
    {
        pagedResult = await SentinelEntryService.ListPaged(
            pageSize: 50, 
            pageIndex: currentPage, 
            searchTerm: string.IsNullOrEmpty(searchTerm) ? null : searchTerm,
            organizationId: selectedOrganizationId <= 0 ? null : selectedOrganizationId
        ).ConfigureAwait(true);
        
        sentinelEntries = pagedResult.SentinelEntries;
    }

    private async Task OnSearchAsync()
    {
        currentPage = 0; // Reset to first page when searching
        await LoadDataAsync().ConfigureAwait(true);
        StateHasChanged();
    }

    private async Task OnClearSearchAsync()
    {
        searchTerm = string.Empty;
        currentPage = 0;
        await LoadDataAsync().ConfigureAwait(true);
        StateHasChanged();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnSearchAsync().ConfigureAwait(true);
        }
    }

    private async Task OnOrganizationChangeAsync()
    {
        currentPage = 0; // Reset to first page when changing organization
        await LoadDataAsync().ConfigureAwait(true);
        StateHasChanged();
    }

    private async Task OnPageChangedAsync(int page)
    {
        currentPage = page;
        await LoadDataAsync().ConfigureAwait(true);
        StateHasChanged();
    }

    private void DetailsClick(int id)
    {
        selectedId = id;
        showDetails = true;
    }

    private void CreateClick()
    {
        showCreate = true;
    }

    private void EditClick(int id)
    {
        selectedId = id;
        showEdit = true;
    }

    private void DeleteClick(int id)
    {
        selectedId = id;
        showDelete = true;
    }

    private async Task CloseDetailsHandler(string action)
    {
        showDetails = false;
        await ReloadCatalogItems().ConfigureAwait(true);
    }
    
    private async Task CloseEditHandler(string action)
    {
        showEdit = false;
        await ReloadCatalogItems().ConfigureAwait(true);
    }

    private async Task CloseDeleteHandler(string action)
    {
        showDelete = false;
        await ReloadCatalogItems().ConfigureAwait(true);
    }

    private async Task CloseCreateHandler(string action)
    {
        showCreate = false;
        await ReloadCatalogItems().ConfigureAwait(true);
    }

    private async Task ReloadCatalogItems()
    {
        await LoadDataAsync().ConfigureAwait(true);
        StateHasChanged();
    }
}
