// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NRZMyk.Services.Data;

#nullable disable

namespace NRZMyk.Services.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241013145551_Organization_RemoveEmailAndAddLastReminderSent")]
    partial class Organization_RemoveEmailAndAddLastReminderSent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NRZMyk.Services.Data.Entities.AntimicrobialSensitivityTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AntifungalAgent")
                        .HasColumnType("int");

                    b.Property<int?>("ClinicalBreakpointId")
                        .HasColumnType("int");

                    b.Property<float>("MinimumInhibitoryConcentration")
                        .HasColumnType("real");

                    b.Property<int>("Resistance")
                        .HasColumnType("int");

                    b.Property<int?>("SentinelEntryId")
                        .HasColumnType("int");

                    b.Property<int>("TestingMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicalBreakpointId");

                    b.HasIndex("SentinelEntryId");

                    b.ToTable("AntimicrobialSensitivityTest");
                });

            modelBuilder.Entity("NRZMyk.Services.Data.Entities.ClinicalBreakpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AntifungalAgent")
                        .HasColumnType("int");

                    b.Property<string>("AntifungalAgentDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("MicBreakpointResistent")
                        .HasColumnType("real");

                    b.Property<float?>("MicBreakpointSusceptible")
                        .HasColumnType("real");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.Property<int>("Standard")
                        .HasColumnType("int");

                    b.Property<float?>("TechnicalUncertainty")
                        .HasColumnType("real");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Standard", "Version", "Species", "AntifungalAgentDetails")
                        .IsUnique();

                    b.ToTable("ClinicalBreakpoints");
                });

            modelBuilder.Entity("NRZMyk.Services.Data.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DispatchMonth")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastReminderSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("NRZMyk.Services.Data.Entities.RemoteAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Postalcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("RemoteAccounts");
                });

            modelBuilder.Entity("NRZMyk.Services.Data.Entities.SentinelEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AgeGroup")
                        .HasColumnType("int");

                    b.Property<int>("CryoBoxNumber")
                        .HasColumnType("int");

                    b.Property<int>("CryoBoxSlot")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CryoDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CryoRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("HospitalDepartment")
                        .HasColumnType("int");

                    b.Property<int>("HospitalDepartmentType")
                        .HasColumnType("int");

                    b.Property<int>("IdentifiedSpecies")
                        .HasColumnType("int");

                    b.Property<int>("InternalHospitalDepartmentType")
                        .HasColumnType("int");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<string>("OtherHospitalDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherIdentifiedSpecies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PcrDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PredecessorEntryId")
                        .HasColumnType("int");

                    b.Property<string>("ProtectKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SamplingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderLaboratoryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpeciesIdentificationMethod")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<int>("YearlySequentialEntryNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PredecessorEntryId");

                    b.HasIndex("ProtectKey");

                    b.HasIndex("CryoBoxNumber", "CryoBoxSlot")
                        .IsUnique();

                    b.HasIndex("Year", "YearlySequentialEntryNumber")
                        .IsUnique();

                    b.ToTable("SentinelEntries");
                });

            modelBuilder.Entity("NRZMyk.Services.Data.Entities.AntimicrobialSensitivityTest", b =>
                {
                    b.HasOne("NRZMyk.Services.Data.Entities.ClinicalBreakpoint", "ClinicalBreakpoint")
                        .WithMany("AntimicrobialSensitivityTests")
                        .HasForeignKey("ClinicalBreakpointId");

                    b.HasOne("NRZMyk.Services.Data.Entities.SentinelEntry", "SentinelEntry")
                        .WithMany("AntimicrobialSensitivityTests")
                        .HasForeignKey("SentinelEntryId");

                    b.Navigation("ClinicalBreakpoint");

                    b.Navigation("SentinelEntry");
                });

            modelBuilder.Entity("NRZMyk.Services.Data.Entities.RemoteAccount", b =>
                {
                    b.HasOne("NRZMyk.Services.Data.Entities.Organization", "Organization")
                        .WithMany("Members")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("NRZMyk.Services.Data.Entities.SentinelEntry", b =>
                {
                    b.HasOne("NRZMyk.Services.Data.Entities.SentinelEntry", "PredecessorEntry")
                        .WithMany()
                        .HasForeignKey("PredecessorEntryId");

                    b.Navigation("PredecessorEntry");
                });

            modelBuilder.Entity("NRZMyk.Services.Data.Entities.ClinicalBreakpoint", b =>
                {
                    b.Navigation("AntimicrobialSensitivityTests");
                });

            modelBuilder.Entity("NRZMyk.Services.Data.Entities.Organization", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("NRZMyk.Services.Data.Entities.SentinelEntry", b =>
                {
                    b.Navigation("AntimicrobialSensitivityTests");
                });
#pragma warning restore 612, 618
        }
    }
}
